<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Creating an Project with the Attributed Robot Model</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="170012b3-b0f8-4b6f-9d87-431df0ef0969" /><meta name="Description" content="The Attributed Robot Model is a new way of creating a Command-Based Robot that removes nearly all of the boilerplate code (aka hookup code, like the usual OI class) usually required." /><meta name="Microsoft.Help.ContentType" content="How To" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">.NET for FIRST Robotics Competition<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="b5a166d2-9e36-48db-8e16-044823276a02.htm" title=".NET for FIRST Robotics Competition" tocid="roottoc">.NET for FIRST Robotics Competition</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="b5a166d2-9e36-48db-8e16-044823276a02.htm" title=".NET for FIRST Robotics Competition" tocid="b5a166d2-9e36-48db-8e16-044823276a02">.NET for FIRST Robotics Competition</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="97ea22ce-3980-446f-96c5-2d89871a71e8.htm" title="Tutorials and How-tos" tocid="97ea22ce-3980-446f-96c5-2d89871a71e8">Tutorials and How-tos</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="c85aadff-f6d3-48a2-8453-ac3eb71b06c5.htm" title="How to Install on Windows" tocid="c85aadff-f6d3-48a2-8453-ac3eb71b06c5">How to Install on Windows</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="315e628d-551d-49f8-8aee-3e1721b11268.htm" title="Installing the Runtime onto the RoboRIO" tocid="315e628d-551d-49f8-8aee-3e1721b11268">Installing the Runtime onto the RoboRIO</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="83a0dc5f-fb15-4210-a7a9-75275dca4ab6.htm" title="Creating your first FRC Project" tocid="83a0dc5f-fb15-4210-a7a9-75275dca4ab6">Creating your first FRC Project</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="170012b3-b0f8-4b6f-9d87-431df0ef0969.htm" title="Creating an Project with the Attributed Robot Model" tocid="170012b3-b0f8-4b6f-9d87-431df0ef0969">Creating an Project with the Attributed Robot Model</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="0c9aca86-82a6-48d8-8e2b-a198bedf8d76.htm" title="Creating an Project using the LabVIEW style base class" tocid="0c9aca86-82a6-48d8-8e2b-a198bedf8d76">Creating an Project using the LabVIEW style base class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="45c801c5-c35c-4939-a03e-9924749b0f32.htm" title="Upgrading WPILib" tocid="45c801c5-c35c-4939-a03e-9924749b0f32">Upgrading WPILib</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Help.png" /></td><td class="titleColumn">Creating an Project with the Attributed Robot Model</td></tr></table><span class="introStyle"></span><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[This is preliminary documentation and is subject to change.]</p><div class="summary"><p>
          The Attributed Robot Model is a new way of creating a Command-Based Robot that removes nearly all of the boilerplate code (aka hookup code, like the usual OI class) usually required.
          This model uses a process called "reflection" to find the subsystems and commands and hook them up correctly.  Consequently, the robot will take a little longer (read: a second or two) to initialize upon startup, but the difference is not noticable in most situations.
      </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Prerequisites</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
            This tutorial requires the WPILib.Extras NuGet package to be installed.
        </p></div><h3 class="procedureSubHeading">Creating a basic project with the Attributed Robot Model</h3><div class="subSection"><ol><li><p>Create a new robot project using the Attributed Command Robot template.  You should see the following files:</p><dl><dt>ProjectName.cs</dt><dd><p>
                    This contains your Robot class.
                    Your robot class derives from the <a href="T_WPILib_Extras_AttributedCommandModel_AttributedRobot.htm">AttributedRobot</a> class.
                    This class sets everything up to execute when you want it to.
                </p></dd><dt>RobotMap.cs</dt><dd><p>
                    This class should have the ports defined for each piece of hardware attached to the robot as constants.
                </p></dd><dt>Program.cs</dt><dd><p>
                    This class contains the entry point to the project.  You should never have to edit this file.
                </p></dd><dt>Subsystems/ExampleSubsystem.cs</dt><dd><p>
                    This class is an example subsystem that will automatically be set up and have its default command set to be an instance of <span class="code">ExampleCommand</span>.
                </p></dd><dt>Commands/ExampleCommand.cs</dt><dd><p>
                    This class is an example command that is automatically set up as the default command for an instance of <span class="code">ExampleSubsystem</span>.
                    NOTE: It MUST have the constructor taking an <span class="code">ExampleSubsystem</span> for it to work.
                </p></dd><dt>Commands/ExampleAutonomousCommand.cs</dt><dd><p>
                    This class is an example command that is automatically set up to start when the robot enters Autonomous mode.
                    NOTE: It does not require the constructor taking an <span class="code">ExampleSubsystem</span> for it to work, but that is the only way for it to <span class="code">Require</span> the subsystem.
                </p></dd></dl></li><li><p>To add a new subsystem, right click on your project and click Add &gt; New Item.  Create a Subsystem.
            This is the same template as used for a Command-Based Robot.  To make it automatically load, add the following code on a new line before <span class="code">class</span>:
              (Note: this is called adding an attribute to the class)</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EADABBDAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EADABBDAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EADABBDAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[WPILib.Extras.AttributedCommandModel.ExportSubsystem]</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EADABBDAAA");</script><p>
              The subsystem will now automatically load.  To specify a default command, use the following:
          </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABABBDAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EABABBDAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABABBDAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[WPILib.Extras.AttributedCommandModel.ExportSubsystem(DefaultCommandType=<span class="highlight-keyword">typeof</span>(CommandType))]</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABABBDAAA");</script><p>Where <span class="code">CommandType</span> is the type of the command.</p></li><li><p>
                      To add a new command, right click on your project and click Add &gt; New Item.  Create a Command.
                      This is the same template as used for a Command-Based Robot.  To set it up to auto-load, there are a few different ways: default command, phase command, and button command.
                      The default command is configured on the respective subsystem as seen above.
                      If your command is a default command, it MUST have a constructor that takes ONLY an instance of the subsystem it is the default command for, or your project will fail to run.
                      To set it up as a phase command, add the RunCommandAtPhaseStart attribute to the commmand class.  You will have to specify which phase to start the command on with the <span class="code">MatchPhase</span> enumeration.
                      If your command acts on a button, you will have to pick the correct attribute.  There is one attribute for each of the different button classes.  Use the correct method (and pass in the required parameters),
                       and the library will automatically set up the command to execute when you want it to.
                  </p></li></ol></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID2RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_WPILib_Extras_AttributedCommandModel.htm">WPILib.Extras.AttributedCommandModel</a></div><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="https://GitHub.com/RobotDotNet" title="Go to GitHub" target="_blank">RobotDotNet on GitHub</a></div></div></div></div><div id="pageFooter" class="pageFooter" /></body></html>